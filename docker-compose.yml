services:

    api-gateway:
        restart: always
        build:
          context: .
          dockerfile: containers/api-gateway/Dockerfile
        ports:
            - "8044:8044"
        env_file:
            - .env
        environment: #in production, overrides value of env var set for development
            SINGLE_CONTAINER: "false"
        volumes:
            - ./certs/api-gateway:/build/certs/api-gateway

    game-service:
        restart: always
        build:
          context: .
          dockerfile: containers/game-service/Dockerfile
        ports:
            - "8045:8045"
        env_file:
            - .env
        environment: #in production, overrides value of env var set for development
            SINGLE_CONTAINER: "false"
        volumes:
            - ./certs/game-service:/build/certs/game-service
            - game-service-data:/data

    auth:
        restart: always
        build:
          context: .
          dockerfile: containers/auth/Dockerfile
        volumes:
          - ./certs/auth:/build/certs/auth
          - ./certs/ca:/build/certs/ca
          - auth-data:/data
        env_file:
            - .env
        environment: #in production, overrides value of env var set for development
          SINGLE_CONTAINER: "false"

    client:
        restart: always
        build:
          context: .
          dockerfile: containers/client/Dockerfile
        volumes:
            - ./certs/client:/build/certs/client
        env_file:
            - .env
        environment: #in production, overrides value of env var set for development
            SINGLE_CONTAINER: "false"
        ports:
            - "8042:8042"

    profile:
        restart: always
        build:
            context: .
            dockerfile: containers/profile/Dockerfile
        volumes:
            - ./certs/profile:/build/certs/profile
            - ./certs/ca:/build/certs/ca
            - profile-data:/data
        env_file:
            - .env
        environment: #in production, overrides value of env var set for development
            SINGLE_CONTAINER: "false"

    elasticsearch:
        restart: always
        build:
            context: ./containers/elk-logs/elasticsearch
            dockerfile: Dockerfile
        volumes:
            - ./certs/elasticsearch:/usr/share/elasticsearch/config/certs
            - ./certs/ca:/usr/share/elasticsearch/config/certs/ca
            - elastic-data:/usr/share/elasticsearch/data
        environment:
            - ES_JAVA_OPTS=-Xms512m -Xmx512m
            - discovery.type=single-node
            - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
            - KIBANA_PASSWORD=${ELASTIC_PASSWORD}
        mem_limit: 1g
        ports:
            - "9200:9200"
        healthcheck:
            test: ["CMD-SHELL", "curl -s -k -u elastic:${ELASTIC_PASSWORD} https://localhost:9200 >/dev/null || exit 1"]
            interval: 20s
            timeout: 10s
            retries: 50
            start_period: 20s

    logstash:
        restart: always
        build:
            context: ./containers/elk-logs/logstash
            dockerfile: Dockerfile
        volumes:
            - ./certs/logstash:/usr/share/logstash/config/certs
            - ./certs/ca:/usr/share/logstash/config/certs/ca
        environment:
            - LS_JAVA_OPTS=-Xms512m -Xmx512m
            - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
        mem_limit: 1g
        ports:
            - "5044:5044"
        depends_on:
            elasticsearch:
                condition: service_healthy

    kibana:
        restart: always
        build:
            context: ./containers/elk-logs/kibana
            dockerfile: Dockerfile
        volumes:
            - ./certs/kibana:/usr/share/kibana/config/certs
            - ./certs/ca:/usr/share/kibana/config/certs/ca
        environment:
            - ELASTICSEARCH_HOSTS=https://elasticsearch:9200
            - KIBANA_PASSWORD=${ELASTIC_PASSWORD}
            - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
        ports:
            - "5601:5601"
        depends_on:
            elasticsearch:
                condition: service_healthy

    filebeat:
        restart: always
        build:
            context: ./containers/elk-logs/filebeat
            dockerfile: Dockerfile
        user: root
        volumes:
            - ./certs/filebeat:/usr/share/filebeat/config/certs
            - ./certs/ca:/usr/share/filebeat/config/certs/ca
            - /var/lib/docker/containers:/var/lib/docker/containers:ro
            - /var/run/docker.sock:/var/run/docker.sock:ro
        depends_on:
            - logstash

volumes:
  auth-data:
  elastic-data:
  game-service-data:
  profile-data:
